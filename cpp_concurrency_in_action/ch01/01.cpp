/* =======================

【什么是并发】
并发是指两个或更多独立的活动同时发生。
单个系统里同时执行多个独立的活动，而非顺序的或者一个接一个的活动

任务切换  -->  并发的假象
硬件并发  -->  真正的并发

任务切换：需要切换一次上下文，操作系统必须得为当前运行的任务保存cpu的状态和指令指针等等工作
一般情况下，就算在"硬件并发"的情况下也需要"任务切换"，两者会一起使用

◀️并发的途径
	1.多进程并发：将应用程序分为多个独立的、单线程的进程。
		·这些独立的进程可以通过进程间常规的通信渠道互相传递信息
		·缺点：进程间通信设置复杂，速度慢，而且运行每个进程都需要固定的一些开销
		·优点：可以使用远程连接的方式，在不同的机器上运行独立的进程

	2.多线程并发：在单个进程中运行多个线程。
		·线程像轻量级的进程：每个线程相互独立运行，且线程可以在不同的指令序列中运行
		·进程中的所有线程都共享相同的地址空间

		·地址空间共享
			优点：缺少线程间数据的保护，使得操作系统的记录工作量减少，所以使用多线程的开销远远小于多进程
			缺点：数据一致性问题。如果数据要被多个线程访问，那么必须确保当每个线程访问时所取到的数据是一致的。因此程序员需要对线程间的通信做大量的工作

	后面提到的“并发”，一般都是指多线程！

◀️为什么使用并发？
	1.关注点分离
		例子：DVD播放程序，两种功能，一，播放DVD；二，接收用户的输入，比如“暂停”等操作。使用多线程可以分割两部分，那么“用户界面”代码和“DVD播放”代码久不需要放在一起了。
		另外，独立的线程通常也用来执行那些必须在后台持续运行的任务。例如桌面搜索程序中监视文件系统变化的任务。这也会让每个线程的逻辑变得更加简单
	2.性能
		计算能力的提高，不仅是单一任务运行得更快，而是并行运行多个任务
		
		方式：
		a.任务并行。将一个单个任务分成几部分，且各自并行运行，从而减低总运行时间。
		b.数据并行。

◀️什么时候不使用并发？
	基本上不使用并发的唯一原因：收益比不上成本
	使用并发的代码一般式难以理解的，因此编写和维护多线程代码需要一定的脑力成本，也有更大的机会引起bug
	除非：
		1.关注点分离得足够清晰
		2.性能增益足够大
	否则，不要用并发


	使用并发：
	1.性能增益可能会小于预期。
		因为操作系统需要分配内核相关的资源和堆栈空间，所以启动线程时存在固有的开销
		如果在线程上的任务完成得很快，那么任务实际的时间 << 启动线程的时间，就会导致应用程序使用并发后性能反而下降的可能
	2.线程是有限的资源。
		·太多线程同时运行，则会消耗很多操作系统资源，从而使得操作系统整体上运行得更加缓慢
		·太多线程同时运行，也有可能耗尽进程的可用内存或地址空间，因为每个线程都需要一个独立的堆栈空间
		·太多线程同时运行，操作系统就需要做越多的上下文切换，所以这也是需要额外的时间。所以在某些时候，增加一个额外的线程实际上会降低整体的性能！

◀️开始入门
	多线程与普通c++程序差不多，唯一区别是某些函数可以并发运行，所以需要确保共享数据在并发访问时是安全的
	为了并发地运行函数，必须使用特定的函数以及对象来管理各个线程


*/


#include <iostream>
#include <thread>  // 对多线程支持的声明头文件，用于管理线程的函数和类。而保护共享数据的函数和类则在其他的头文件中
using namespace std;

// 每个线程都必须具有一个初始函数，新线程的执行在这里开始
void hello()
{
	cout << "Hello Concurrent World\n";
}

// 初始线程是main()
int main()
{
	thread t(hello);  // 新线程启动
	t.join();  // 没有这句，那么main就会往下面执行了，不等hello线程结束
	return 0;
}


